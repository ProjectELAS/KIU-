# [자료구조란]
# 그릇(자료)을 효율적으로 관리하는 방법, 자료를 저장하고 관리하기 위한 구조

# [알고리즘이란]
# 목적지까지 최적의 이동 경로를 찾는 방법
# 문제를 해결하는 순서
# 문제: 프로그램을 통해 해결하고자 하는 것 


# [자료구조의 종류]
# 단순 자료구조 : 정수 -> 실수 -> 문자 -> 문자열
# 선형 자료구조 : 리스트 -> 스택 -> 큐
# 비선형 자료구조 : 트리 -> 그래프
# 파일 자료구조 : 순차 파일 -> 색인 파일 -> 직접 파일


# [단순 자료구조]
# 정수
# 프로그래밍 언어의 데이터 형식에 해당하는 정수, 실수, 문자, 문자열 등
# 정수 : int 또는 integer 형태로 소수점이 없음
# 0, 100, 1234, -27 등

# [실수]
# 소수점이 있는 형태로 float 등으로 표현
# 실수 0.1, 3.14, 1.234567 등

# [문자]
# 한 글자를 의미하며 char로 표현
# 주로 작은 따옴표 ( '' )로 묶어 줌
# 문자 'A', '채', '3' 등

# [문자열]
# 글자 여러 개를 연결한 것으로, string으로 표현
# 주로 큰 따옴표 ( "" )로 묶어 줌
# 문자열 "안녕", "1234", "한" 등


# [선형 자료구조]
# 데이터를 한 줄로 순차적으로 표현한 형태. 선형 리스트, 연결 리스트, 스택, 큐 등
# 선형 형태 예시 : A -> B -> C -> D -> E 

# [비선형 자료구조]
# 하나의 데이터 뒤에 여러 개가 이어지는 형태. 트리와 그래프 등
#      A
#    B   C
#   D E


# [파일 자료구조]
# 파일 내용이 디스크에 저장되는 방식에 따라 순차 파일과 직접 파일로 구분
# 순차 파일(Sequential File)
    # 파일 내용을 논리적인 처리 순서에 따라 연속해서 저장하는 것
    # 구조가 간단하기에 저장되는 공간 효율이 높지만, 다른 내용을 추가하거나 삭제할 경우에는 파일 내용을 재구성해야 하므로 상당히 시간이 오래 걸림.

# 직접 파일(Direct File)
    # 파일 내용을 임의의 물리적 위치에 기록하는 방식으로 직접 접근 방식(Direct Access Method)


# [알고리즘]
# 어떤 문제를 해결해 가는 논리적인 과정, 문제를 해결하는 순서
# 알고리즘 예
    # 트럭에는 최대 7톤의 무게를 실을 수 있고 단 1회만 운송할 수 있다면, 선호도 합이 최대가 되도록 동물을 태우는 방법?
    # 코끼리 : 6톤 (선호도 6), 하마 : 4톤 (선호도 3), 기린 : 5톤 (선호도 5), 물소 : 3톤 (선호도 4), 호랑이 : 2톤 (선호도 1), 사자 : 2톤 (선호도 1), 얼룩말 : 2톤 (선호도 1)

    # 동물을 트럭에 태우기
    # 선호도가 가장 높은 코끼리를 먼저 태우기 : 현재 6톤
    # 다음으로 선호도가 높은 기린을 태우기 : 최대중량이 높아서 탑승 불가.
    # 다음으로 선호도가 높은 물소를 태우기 : //
    # 다음으로 선호도가 높은 하마를 태우기 : //
    # 다음으로 선호도 높은 호랑이, 사자 ,얼룩말을 차례대로 태우기 : //

    # 최종적으로 코끼리 한 마리만 태워서 총 선호도는 6
    # 트럭이 동물원으로 출발.


# [자료구조]
# 컴퓨터 분야에서 효율적으로 접근하고 수정할 수 있도록 자료를 구성-관리-저장하는 것

# [알고리즘]
# 컴퓨터 분야나 수학 등 관련 분야에서 어떤 문제를 해결하기 위해 정해진 일련의 단계적인 절차나 방법

# [알고리즘 표현법]
# 일반 언어 표현
    # 일반적인 자연어를 사용해서 설명하듯이 알고리즘 표현
# 순서도를 이용햔 표현
    # 여러 종류의 상자와 상자를 이어 주는 화살표를 이용해서 명령 순서를 표현
    # 간단한 알고리즘은 쉽게 표현할 수 있지만, 복잡한 알고리즘은 표현하기 어려운 경우가 많음
# 의사코드를 이용한 표현
    # 프로그래밍 언어보다는 좀 더 인간의 언어에 가까운 형태
    # 프로그램 코드와 일반 언어의 중간 형태
# 프로그램 코드로 표현 
    # 실제로 사용하는 프로그래밍 언어의 코드로 바로 작성 가능
# 혼합 형태
    # 간단한 알고리즘은 직접 코드로 작성
    # 복잡한 알고리즘은 일반 언어, 의사코드, 순서도, 그림 등을 종합적으로 활용해서 표현


# [알고리즘의 성능]
# 알고리즘 성능 측정
    # 알고리즘을 소요 시간을 기준으로 알고리즘 성능을 분석 방법이 '시간 복잡도(Time Complexity)'
    # 예시 1번
    # 합계 <- 0
    # for 1 range 100:  (숫자가 1부터 100까지 반복) 
        # 합계 <- 합계 + 숫자
    # 합계 출력

    # y = x

    # 예시 2번
    # 합계 <- 0
    # 합계 <- (1+100) * (100) / 2
    # 합계 출력

    # y = 1

# 알고리즘 성능 표기 (^ 2제곱), (^^ 3제곱)
    # 빅-오 표기법(Big-Oh Notation)으로 O(f(n)) 형태
    # 대표적인 함수는 O(1), O(log n), O(n), O(n log n), O(n^), O(n^^), O(2^) 정도.